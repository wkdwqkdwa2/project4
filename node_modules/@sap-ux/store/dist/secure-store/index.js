"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSecureStore = void 0;
const utils_1 = require("../utils");
const dummy_store_1 = require("./dummy-store");
const keytar_store_1 = require("./keytar-store");
const path_1 = require("path");
const os_1 = require("os");
const fs_1 = __importDefault(require("fs"));
function getKeytarPaths(insiders) {
    const vscodeRootPath = insiders ? '.vscode-insiders' : '.vscode';
    const vscodeExtensionsPath = (0, path_1.join)((0, os_1.homedir)(), vscodeRootPath, 'extensions/');
    const AppMFoldersVscode = fs_1.default
        .readdirSync(vscodeExtensionsPath)
        .filter((fn) => fn.startsWith('sapse.sap-ux-application-modeler-extension')) ?? [];
    return AppMFoldersVscode.map((AppMFolderVscode) => {
        const extensionPath = (0, path_1.join)(vscodeExtensionsPath, AppMFolderVscode);
        const keytarPackageJsonPath = (0, path_1.join)(extensionPath, 'node_modules/keytar/package.json');
        if (fs_1.default.existsSync(keytarPackageJsonPath)) {
            return (0, path_1.dirname)(keytarPackageJsonPath);
        }
        else {
            return '';
        }
    }).filter((dirname) => dirname !== '');
}
function getKeytar(log) {
    try {
        return require('keytar');
    }
    catch (err) {
        log.warn((0, utils_1.errorString)(err));
        // Try to load keytar from sap-ux-application-modeler-extension node_modules if available this helps in some
        // cases such as windows machines with restricted access. From node modules such as @sap/generator-fiori or @sap/ux-ui5-tooling
        // keytar is not installed or is removed from the fs by virus scanner.
        try {
            const AppMKeytarDirs = getKeytarPaths(false).concat(getKeytarPaths(true));
            log.info('keytarDirectories: \n' + JSON.stringify(AppMKeytarDirs) + '\n');
            if (AppMKeytarDirs.length > 0) {
                // try to load keytar from the first directory found
                const keytarDir = AppMKeytarDirs[0];
                log.info('Try to load keytar from :' + JSON.stringify(keytarDir) + '\n');
                // Support bundling
                if (typeof __non_webpack_require__ === 'function') {
                    return __non_webpack_require__(keytarDir);
                }
                else {
                    return require(keytarDir);
                }
            }
        }
        catch (e) {
            log.warn((0, utils_1.errorString)(e));
            log.warn('Could not get keytar from sap-ux-application-modeler-extension node_modules');
        }
        log.warn(`Could not "require('keytar')". Trying VSCode's copy`);
        let vscode;
        try {
            vscode = require('vscode');
        }
        catch (e) {
            log.warn((0, utils_1.errorString)(e));
            log.warn('Could not get hold of vscode');
            return undefined;
        }
        try {
            return require(`${vscode?.env?.appRoot}/node_modules.asar/keytar`);
        }
        catch (e) {
            log.warn((0, utils_1.errorString)(e));
            log.warn('Could not get keytar from vscode node_modules.asar');
        }
        try {
            return require(`${vscode?.env?.appRoot}/node_modules/keytar`);
        }
        catch (e) {
            log.warn((0, utils_1.errorString)(e));
            log.warn('Could not get keytar from vscode node_modules');
        }
        return undefined;
    }
}
/**
 * Create an instance of a store
 */
const getSecureStore = (log) => {
    if ((0, utils_1.isAppStudio)() || process.env.FIORI_TOOLS_DISABLE_SECURE_STORE) {
        return new dummy_store_1.DummyStore(log);
    }
    else {
        const keytar = getKeytar(log);
        return keytar ? new keytar_store_1.KeytarStore(log, keytar) : new dummy_store_1.DummyStore(log);
    }
};
exports.getSecureStore = getSecureStore;
__exportStar(require("./types"), exports);
//# sourceMappingURL=index.js.map