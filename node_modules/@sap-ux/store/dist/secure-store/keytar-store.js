"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeytarStore = void 0;
const utils_1 = require("../utils");
class KeytarStore {
    log;
    keytar;
    constructor(log, keytar) {
        this.log = log;
        this.keytar = keytar;
    }
    async save(service, key, value) {
        try {
            const serialized = JSON.stringify(value);
            await this.keytar.setPassword(service, key, serialized);
            return true;
        }
        catch (e) {
            this.log.error(`Error saving to secure store. Service: [${service}], key: [${key}]`);
            this.log.error((0, utils_1.errorString)(e));
            return false;
        }
    }
    async retrieve(service, key) {
        try {
            const serializedValue = await this.keytar.getPassword(service, key);
            return serializedValue && JSON.parse(serializedValue);
        }
        catch (e) {
            this.log.error(`Error retrieving from secure store. Service: [${service}], key: [${key}]`);
            this.log.error((0, utils_1.errorString)(e));
            return undefined;
        }
    }
    async delete(service, key) {
        try {
            return await this.keytar.deletePassword(service, key);
        }
        catch (e) {
            this.log.error(`Error deleting from secure store. Service: [${service}], key: [${key}]`);
            this.log.error((0, utils_1.errorString)(e));
            return false;
        }
    }
    async getAll(service) {
        try {
            return (await this.keytar.findCredentials(service)).reduce((result, entry) => {
                try {
                    result[String(entry.account)] = JSON.parse(entry.password);
                }
                catch (e) {
                    this.log.error(`Error parsing credentials for [${entry.account}]`);
                }
                return result;
            }, {});
        }
        catch (e) {
            this.log.error(`Error getting values for service: [${service}]`);
            this.log.error((0, utils_1.errorString)(e));
            return {};
        }
    }
}
exports.KeytarStore = KeytarStore;
//# sourceMappingURL=keytar-store.js.map