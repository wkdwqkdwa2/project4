"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.moduleNameContentMap = void 0;
exports.tryFixChange = tryFixChange;
exports.isAddXMLChange = isAddXMLChange;
exports.addXmlFragment = addXmlFragment;
const path_1 = require("path");
const project_access_1 = require("@sap-ux/project-access");
const ejs_1 = require("ejs");
const crypto_1 = require("crypto");
const OBJECT_PAGE_CUSTOM_SECTION = 'OBJECT_PAGE_CUSTOM_SECTION';
const CUSTOM_ACTION = 'CUSTOM_ACTION';
const OBJECT_PAGE_HEADER_FIELD = 'OBJECT_PAGE_HEADER_FIELD';
const fragmentTemplateDefinitions = {
    [OBJECT_PAGE_CUSTOM_SECTION]: {
        path: 'common/op-custom-section.xml',
        getData: () => {
            const uuid = (0, crypto_1.randomBytes)(4).toString('hex');
            return {
                ids: {
                    objectPageSection: `op-section-${uuid}`,
                    objectPageSubSection: `op-subsection-${uuid}`,
                    hBox: `hbox-${uuid}`
                }
            };
        }
    },
    [CUSTOM_ACTION]: {
        path: 'common/custom-action.xml',
        getData: () => {
            const uuid = (0, crypto_1.randomBytes)(4).toString('hex');
            return {
                ids: {
                    toolbarActionButton: `btn-${uuid}`
                }
            };
        }
    },
    [OBJECT_PAGE_HEADER_FIELD]: {
        path: 'common/header-field.xml',
        getData: () => {
            const uuid = (0, crypto_1.randomBytes)(4).toString('hex');
            return {
                ids: {
                    vBoxContainer: `vBox-${uuid}`,
                    label: `label-${uuid}`
                }
            };
        }
    }
};
/**
 * A mapping object that defines how to extract change content data from changes based on their type.
 */
exports.moduleNameContentMap = {
    codeExt: (change) => (change.content?.codeRef ?? '').replace('.js', ''),
    addXML: (change) => change.content?.fragmentPath ?? ''
};
/**
 * Sets the moduleName property of the provided change to also support old changes with newer UI5 versions.
 *
 * @param change change to be fixed
 * @param logger logger instance
 */
/**
 * Attempts to fix a change object by setting its moduleName based on its reference and changeType
 * to also support old changes with newer UI5 versions.
 *
 * @param {CommonChangeProperties} change - The change object to be fixed.
 * @param {Logger} logger - An instance for logging warnings, errors, or informational messages.
 */
function tryFixChange(change, logger) {
    try {
        const prefix = change.reference.replace(/\./g, '/');
        change.moduleName = `${prefix}/changes/${exports.moduleNameContentMap[change.changeType](change)}`;
    }
    catch (error) {
        logger.warn('Could not fix missing module name.');
    }
}
/**
 * Determines whether a given change is of type `AddXMLChange`.
 *
 * @param {CommonChangeProperties} change - The change object to check.
 * @returns {boolean} `true` if the `changeType` is either 'addXML' or 'addXMLAtExtensionPoint',
 *          indicating the change is of type `AddXMLChange`.
 */
function isAddXMLChange(change) {
    return change.changeType === 'addXML' || change.changeType === 'addXMLAtExtensionPoint';
}
/**
 * Asynchronously adds an XML fragment to the project if it doesn't already exist.
 *
 * @param {string} basePath - The base path of the project.
 * @param {AddXMLChange} change - The change data, including the fragment path.
 * @param {Editor} fs - The mem-fs-editor instance.
 * @param {Logger} logger - The logging instance.
 */
function addXmlFragment(basePath, change, fs, logger) {
    const { fragmentPath } = change.content;
    const fullPath = (0, path_1.join)(basePath, project_access_1.DirName.Changes, fragmentPath);
    const templateConfig = fragmentTemplateDefinitions[change.content?.templateName ?? ''];
    try {
        if (templateConfig) {
            const fragmentTemplatePath = (0, path_1.join)(__dirname, '../../templates/rta', templateConfig.path);
            const text = fs.read(fragmentTemplatePath);
            const template = (0, ejs_1.render)(text, templateConfig.getData());
            fs.write(fullPath, template);
        }
        else {
            // copy default fragment template
            const templateName = 'fragment.xml'; /* TemplateFileName.Fragment */
            const fragmentTemplatePath = (0, path_1.join)(__dirname, '../../templates/rta', templateName);
            fs.copy(fragmentTemplatePath, fullPath);
        }
        logger.info(`XML Fragment "${fragmentPath}" was created`);
    }
    catch (error) {
        logger.error(`Failed to create XML Fragment "${fragmentPath}": ${error}`);
    }
}
//# sourceMappingURL=change-handler.js.map