"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVariant = getVariant;
exports.getAdpConfig = getAdpConfig;
const fs_1 = require("fs");
const path_1 = require("path");
const ui5_config_1 = require("@sap-ux/ui5-config");
/**
 * Get the app descriptor variant.
 *
 * @param {string} basePath - The path to the adaptation project.
 * @returns {DescriptorVariant} The app descriptor variant.
 */
function getVariant(basePath) {
    return JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(basePath, 'webapp', 'manifest.appdescr_variant'), 'utf-8'));
}
/**
 * Returns the adaptation project configuration, throws an error if not found.
 *
 * @param {string} basePath - The path to the adaptation project.
 * @param {string} yamlPath - The path to yaml configuration file.
 * @returns {Promise<AdpPreviewConfig>} the adp configuration
 */
async function getAdpConfig(basePath, yamlPath) {
    const ui5ConfigPath = (0, path_1.isAbsolute)(yamlPath) ? yamlPath : (0, path_1.join)(basePath, yamlPath);
    const ui5Conf = await ui5_config_1.UI5Config.newInstance((0, fs_1.readFileSync)(ui5ConfigPath, 'utf-8'));
    const customMiddlerware = ui5Conf.findCustomMiddleware('fiori-tools-preview') ??
        ui5Conf.findCustomMiddleware('preview-middleware');
    const adp = customMiddlerware?.configuration?.adp;
    if (!adp) {
        throw new Error('No system configuration found in ui5.yaml');
    }
    return adp;
}
//# sourceMappingURL=helper.js.map