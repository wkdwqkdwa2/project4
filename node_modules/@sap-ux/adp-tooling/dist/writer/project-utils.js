"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageJSONInfo = getPackageJSONInfo;
exports.writeTemplateToFolder = writeTemplateToFolder;
exports.writeUI5Yaml = writeUI5Yaml;
exports.writeUI5DeployYaml = writeUI5DeployYaml;
const path_1 = require("path");
const fs_1 = require("fs");
const options_1 = require("./options");
const ui5_config_1 = require("@sap-ux/ui5-config");
/**
 * Retrieves the package name and version from the package.json file located two levels up the directory tree.
 *
 * @returns {PackageJSON} An object containing the `name` and `version` of the package.
 */
function getPackageJSONInfo() {
    const defaultPackage = {
        name: '@sap-ux/adp-tooling',
        version: 'NO_VERSION_FOUND'
    };
    try {
        return JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../package.json'), 'utf-8'));
    }
    catch (e) {
        return defaultPackage;
    }
}
/**
 * Writes a given project template files within a specified folder in the project directory.
 *
 * @param {string} templatePath - The root path of the project template.
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
function writeTemplateToFolder(templatePath, projectPath, data, fs) {
    try {
        fs.copyTpl(templatePath, projectPath, data, undefined, {
            globOptions: { dot: true },
            processDestinationPath: (filePath) => filePath.replace(/gitignore.tmpl/g, '.gitignore')
        });
    }
    catch (e) {
        throw new Error(`Could not write template files to folder. Reason: ${e.message}`);
    }
}
/**
 * Writes a ui5.yaml file within a specified folder in the project directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
async function writeUI5Yaml(projectPath, data, fs) {
    try {
        const ui5ConfigPath = (0, path_1.join)(projectPath, 'ui5.yaml');
        const baseUi5ConfigContent = fs.read(ui5ConfigPath);
        const ui5Config = await ui5_config_1.UI5Config.newInstance(baseUi5ConfigContent);
        ui5Config.setConfiguration({ propertiesFileSourceEncoding: 'UTF-8' });
        (0, options_1.enhanceUI5YamlWithCustomConfig)(ui5Config, data?.customConfig);
        (0, options_1.enhanceUI5Yaml)(ui5Config, data);
        if (data.customConfig?.adp?.environment === 'C') {
            (0, options_1.enhanceUI5YamlWithCustomTask)(ui5Config, data);
        }
        fs.write(ui5ConfigPath, ui5Config.toString());
    }
    catch (e) {
        throw new Error(`Could not write ui5.yaml file. Reason: ${e.message}`);
    }
}
/**
 * Writes a ui5-deploy.yaml file within a specified folder in the project directory.
 *
 * @param {string} projectPath - The root path of the project.
 * @param {AdpWriterConfig} data - The data to be populated in the template file.
 * @param {Editor} fs - The `mem-fs-editor` instance used for file operations.
 * @returns {void}
 */
async function writeUI5DeployYaml(projectPath, data, fs) {
    try {
        if ((0, options_1.hasDeployConfig)(data)) {
            const ui5ConfigPath = (0, path_1.join)(projectPath, 'ui5.yaml');
            const baseUi5ConfigContent = fs.read(ui5ConfigPath);
            const ui5DeployConfig = await ui5_config_1.UI5Config.newInstance(baseUi5ConfigContent);
            (0, options_1.enhanceUI5DeployYaml)(ui5DeployConfig, data);
            fs.write((0, path_1.join)(projectPath, 'ui5-deploy.yaml'), ui5DeployConfig.toString());
        }
    }
    catch (e) {
        throw new Error(`Could not write ui5-deploy.yaml file. Reason: ${e.message}`);
    }
}
//# sourceMappingURL=project-utils.js.map