"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWebappPath = getWebappPath;
exports.readUi5Yaml = readUi5Yaml;
const path_1 = require("path");
const ui5_config_1 = require("@sap-ux/ui5-config");
const constants_1 = require("../constants");
const file_1 = require("../file");
/**
 * Get path to webapp.
 *
 * @param projectRoot - root path, where package.json or ui5.yaml is
 * @param [memFs] - optional mem-fs editor instance
 * @returns - path to webapp folder
 */
async function getWebappPath(projectRoot, memFs) {
    let webappPath = (0, path_1.join)(projectRoot, 'webapp');
    const ui5YamlPath = (0, path_1.join)(projectRoot, constants_1.FileName.Ui5Yaml);
    if (await (0, file_1.fileExists)(ui5YamlPath, memFs)) {
        const yamlString = await (0, file_1.readFile)(ui5YamlPath, memFs);
        const ui5Config = await ui5_config_1.UI5Config.newInstance(yamlString);
        const relativeWebappPath = ui5Config.getConfiguration()?.paths?.webapp;
        if (relativeWebappPath) {
            webappPath = (0, path_1.join)(projectRoot, relativeWebappPath);
        }
    }
    return webappPath;
}
/**
 * Checks if UI5 config yaml file exists and returns its content.
 *
 * @param projectRoot - path to project root
 * @param fileName - name of yaml file to be read
 * @param [memFs] - optional mem-fs editor instance
 * @returns {UI5Config} UI5 config file in yaml format
 */
async function readUi5Yaml(projectRoot, fileName, memFs) {
    const ui5YamlPath = (0, path_1.join)(projectRoot, fileName);
    if (await (0, file_1.fileExists)(ui5YamlPath)) {
        const yamlString = await (0, file_1.readFile)(ui5YamlPath, memFs);
        return await ui5_config_1.UI5Config.newInstance(yamlString);
    }
    throw Error(`File '${fileName}' not found in project '${projectRoot}'`);
}
//# sourceMappingURL=ui5-config.js.map