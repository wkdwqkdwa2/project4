"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUi5Themes = exports.getDefaultUI5Theme = void 0;
const constants_1 = require("./constants");
const semver_1 = require("semver");
const MIN_UI5_VER_DARK_THEME = '1.72.0';
const MIN_UI5_VER_HORIZON_THEME = '1.102.0';
const ui5Themes = {
    ["sap_belize" /* ui5ThemeIds.SAP_BELIZE */]: {
        id: "sap_belize" /* ui5ThemeIds.SAP_BELIZE */,
        label: 'Belize'
    },
    ["sap_fiori_3" /* ui5ThemeIds.SAP_FIORI_3 */]: {
        id: "sap_fiori_3" /* ui5ThemeIds.SAP_FIORI_3 */,
        label: 'Quartz Light'
    },
    ["sap_fiori_3_dark" /* ui5ThemeIds.SAP_FIORI_3_DARK */]: {
        id: "sap_fiori_3_dark" /* ui5ThemeIds.SAP_FIORI_3_DARK */,
        label: 'Quartz Dark',
        sinceVersion: MIN_UI5_VER_DARK_THEME
    },
    ["sap_horizon" /* ui5ThemeIds.SAP_HORIZON */]: {
        id: "sap_horizon" /* ui5ThemeIds.SAP_HORIZON */,
        label: 'Morning Horizon',
        sinceVersion: MIN_UI5_VER_HORIZON_THEME
    },
    ["sap_horizon_dark" /* ui5ThemeIds.SAP_HORIZON_DARK */]: {
        id: "sap_horizon_dark" /* ui5ThemeIds.SAP_HORIZON_DARK */,
        label: 'Evening Horizon',
        sinceVersion: MIN_UI5_VER_HORIZON_THEME
    }
};
/**
 * Get the default theme for the specified ui5 version string.
 *
 * @param ui5Version - optional, if not specified the latest supported theme will be returned
 * @returns UI5 theme identifier e.g. 'sap_fiori_3'
 */
function getDefaultUI5Theme(ui5Version) {
    if (ui5Version) {
        const cleanSemVer = (0, semver_1.coerce)(ui5Version);
        if (cleanSemVer && (0, semver_1.lt)(cleanSemVer, MIN_UI5_VER_HORIZON_THEME)) {
            return "sap_fiori_3" /* ui5ThemeIds.SAP_FIORI_3 */;
        }
    }
    return "sap_horizon" /* ui5ThemeIds.SAP_HORIZON */;
}
exports.getDefaultUI5Theme = getDefaultUI5Theme;
/**
 * Return supported UI5 themes.
 *
 * @param [ui5Version] - optional, restrict the returned themes to only those supported by specified UI5 version
 * If the passed version is not a valid semantic version all themes will be returned.
 * @returns UI5 themes array
 */
function getUi5Themes(ui5Version = constants_1.defaultVersion) {
    const ui5VersionSince = ui5Version.replace('snapshot-', '');
    const cleanSemVer = (0, semver_1.coerce)(ui5VersionSince);
    // If the ui5 version is a valid semver use it to filter themes
    if (cleanSemVer) {
        return Object.values(ui5Themes).filter((ui5Theme) => ui5Theme.sinceVersion ? (0, semver_1.gte)(cleanSemVer, ui5Theme.sinceVersion) : ui5Theme);
    }
    // Return all themes if ui5 version is not a valid semver
    return Object.values(ui5Themes);
}
exports.getUi5Themes = getUi5Themes;
//# sourceMappingURL=ui5-theme-info.js.map