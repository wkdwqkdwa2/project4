"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSpecialChars = exports.validateJSON = exports.validateEmptySpaces = exports.validateEmptyString = exports.validateUrl = exports.validateClient = void 0;
const i18n_1 = require("../i18n");
/**
 * SAP client number is either empty or 3 digit string.
 *
 * @param client ABAP system client number
 * @returns true or error message
 */
function validateClient(client) {
    const formattedInput = client?.trim() || '';
    const isValid = formattedInput === '' || /^\d{3}$/.test(formattedInput);
    if (isValid) {
        return true;
    }
    else {
        return (0, i18n_1.t)('general.invalidClient', { client });
    }
}
exports.validateClient = validateClient;
/**
 * Validate url input is valid url format.
 *
 * @param input Backend ABAP system url
 * @returns true or error message
 */
function validateUrl(input) {
    try {
        const url = new URL(input);
        return !!url.protocol && !!url.host;
    }
    catch {
        return (0, i18n_1.t)('general.invalidUrl', { input });
    }
}
exports.validateUrl = validateUrl;
/**
 * Validate input is not empty string.
 *
 * @param input input string to be validated
 * @returns true or error message
 */
function validateEmptyString(input) {
    const formattedInput = input?.trim() || '';
    if (formattedInput.trim().length > 0) {
        return true;
    }
    return (0, i18n_1.t)('general.inputCannotBeEmpty');
}
exports.validateEmptyString = validateEmptyString;
/**
 * Validate input does not contain any whitespace characters.
 *
 * @param value The string to check for whitespace characters.
 * @returns true or error message
 */
function validateEmptySpaces(value) {
    if (/\s/.test(value)) {
        return (0, i18n_1.t)('general.inputCannotHaveSpaces');
    }
    return true;
}
exports.validateEmptySpaces = validateEmptySpaces;
/**
 * Validate input is valid JSON.
 *
 * @param value The string to test.
 * @returns true or error message
 */
function validateJSON(value) {
    try {
        JSON.parse(`{${value}}`);
        return true;
    }
    catch {
        return (0, i18n_1.t)('general.invalidJSON');
    }
}
exports.validateJSON = validateJSON;
/**
 * Validates a value for special characters.
 *
 * @param value The value to validate.
 * @param regexp The regex expression for allowed special characters.
 * @returns {boolean} True if validation passes, or an error message if validation fails.
 */
function validateSpecialChars(value, regexp = '^[a-zA-Z0-9_$.\\-]+$') {
    const regex = new RegExp(regexp, 'g');
    if (regex.test(value)) {
        return true;
    }
    return (0, i18n_1.t)('general.invalidValueForSpecialChars');
}
exports.validateSpecialChars = validateSpecialChars;
//# sourceMappingURL=validators.js.map