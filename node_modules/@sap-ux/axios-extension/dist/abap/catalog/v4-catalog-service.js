"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.V4CatalogService = void 0;
const base_1 = require("./base");
const odata_service_1 = require("../../base/odata-service");
const odata_request_error_1 = require("../../base/odata-request-error");
const V4_RECOMMENDED_ENTITYSET = 'RecommendedServices';
const V4_CLASSIC_ENTITYSET = 'Services';
/**
 * OData V4 specific implmentation of SAP's catalog service
 */
class V4CatalogService extends base_1.CatalogService {
    static PATH = '/sap/opu/odata4/iwfnd/config/default/iwfnd/catalog/0002';
    /**
     * Map the V4 service information to a version independent structure.
     *
     * @param groups v4 service groups
     * @param entitySet entity set used for service selection
     * @returns version independent information
     */
    mapServices(groups, entitySet) {
        const services = [];
        groups
            .filter((group) => group?.DefaultSystem?.[entitySet]?.length > 0)
            .forEach((group) => {
            services.push(...group.DefaultSystem[entitySet].map((service) => {
                return {
                    id: service.ServiceId,
                    group: group.GroupId,
                    path: service.ServiceUrl.split('?').shift(),
                    name: `${group.GroupId} > ${service.ServiceAlias || service.ServiceId}`,
                    serviceVersion: service.ServiceVersion,
                    odataVersion: odata_service_1.ODataVersion.v4,
                    serviceType: service.ServiceType
                };
            }));
        });
        return services;
    }
    /**
     * Fetch all services from the backend.
     *
     * @returns version independent service information
     */
    async fetchServices() {
        if (this.entitySet === undefined) {
            const metadata = await this.metadata();
            this.entitySet = metadata.includes('Name="RecommendedServices"')
                ? V4_RECOMMENDED_ENTITYSET
                : V4_CLASSIC_ENTITYSET;
        }
        const params = {
            $count: true,
            $expand: `DefaultSystem($expand=${this.entitySet})`
        };
        let response = await this.get('/ServiceGroups', { params });
        const serviceGroups = response.odata() || [];
        // paging required
        while (response.data['@odata.nextLink']) {
            const nextLink = new URL(response.data['@odata.nextLink']);
            response = await super.get('/ServiceGroups', { params: { ...params, ...nextLink.searchParams } });
            serviceGroups.push(...response.odata());
        }
        // check if the service responded with an odata error
        if (odata_request_error_1.ODataRequestError.containsError(serviceGroups)) {
            throw new odata_request_error_1.ODataRequestError(serviceGroups);
        }
        return this.mapServices(serviceGroups, this.entitySet);
    }
    /**
     * For OData v4, all annotations are already included in the metadata and no additional request is required.
     *
     * @returns an empty array
     */
    getAnnotations() {
        return Promise.resolve([]);
    }
    /**
     * For OData v4, no additonal call is required to retrieve the service type.
     *
     * @returns undefined
     */
    getServiceType() {
        return Promise.resolve(undefined);
    }
}
exports.V4CatalogService = V4CatalogService;
//# sourceMappingURL=v4-catalog-service.js.map