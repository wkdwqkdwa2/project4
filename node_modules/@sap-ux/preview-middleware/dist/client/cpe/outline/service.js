'use strict';
sap.ui.define([
    'sap/base/Log',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../utils/error',
    '../../i18n',
    './nodes'
], function (Log, ___sap_ux_private_control_property_editor_common, ____utils_error, ____i18n, ___nodes) {
    'use strict';
    const outlineChanged = ___sap_ux_private_control_property_editor_common['outlineChanged'];
    const SCENARIO = ___sap_ux_private_control_property_editor_common['SCENARIO'];
    const showMessage = ___sap_ux_private_control_property_editor_common['showMessage'];
    const getError = ____utils_error['getError'];
    const getTextBundle = ____i18n['getTextBundle'];
    const transformNodes = ___nodes['transformNodes'];
    const OUTLINE_CHANGE_EVENT = 'OUTLINE_CHANGED';
    class OutlineService extends EventTarget {
        constructor(rta) {
            super();
            this.rta = rta;
        }
        async init(sendAction) {
            const outline = await this.rta.getService('outline');
            const scenario = this.rta.getFlexSettings().scenario;
            const resourceBundle = await getTextBundle();
            const key = 'ADP_REUSE_COMPONENTS_MESSAGE';
            const message = resourceBundle.getText(key) ?? key;
            let hasSentWarning = false;
            const reuseComponentsIds = new Set();
            const syncOutline = async () => {
                try {
                    const viewNodes = await outline.get();
                    const controlIndex = {};
                    const outlineNodes = await transformNodes(viewNodes, scenario, reuseComponentsIds, controlIndex);
                    const event = new CustomEvent(OUTLINE_CHANGE_EVENT, { detail: { controlIndex } });
                    this.dispatchEvent(event);
                    sendAction(outlineChanged(outlineNodes));
                    if (reuseComponentsIds.size > 0 && scenario === SCENARIO.AdaptationProject && !hasSentWarning) {
                        sendAction(showMessage({
                            message,
                            shouldHideIframe: false
                        }));
                        hasSentWarning = true;
                    }
                } catch (error) {
                    Log.error('Outline sync failed!', getError(error));
                }
            };
            await syncOutline();
            outline.attachEvent('update', syncOutline);
        }
        onOutlineChange(handler) {
            this.addEventListener(OUTLINE_CHANGE_EVENT, handler);
        }
    }
    var __exports = { __esModule: true };
    __exports.OUTLINE_CHANGE_EVENT = OUTLINE_CHANGE_EVENT;
    __exports.OutlineService = OutlineService;
    return __exports;
});