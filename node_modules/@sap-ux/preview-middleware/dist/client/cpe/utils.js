"use strict";

sap.ui.define(["sap/ui/core/mvc/XMLView", "sap/ui/core/UIComponent", "../utils/core", "../utils/version"], function (XMLView, UIComponent, ___utils_core, ___utils_version) {
  "use strict";

  const getComponent = ___utils_core["getComponent"];
  const isLowerThanMinimalUi5Version = ___utils_version["isLowerThanMinimalUi5Version"];
  /**
   * Get runtime control.
   *
   * @param overlayControl - element overlay.
   * @returns ManagedObject
   */
  function getRuntimeControl(overlayControl) {
    let runtimeControl;
    if (overlayControl.getElementInstance) {
      runtimeControl = overlayControl.getElementInstance();
    } else {
      runtimeControl = overlayControl.getElement();
    }
    return runtimeControl;
  }

  /**
   * Get library of a control name.
   *
   * @param controlName - name of the ui5 control eg: sap.m.Button.
   * @returns Promise<string>
   */
  async function getLibrary(controlName) {
    return new Promise(resolve => {
      const controlPath = controlName.replace(/\./g, '/');
      sap.ui.require([controlPath], control => {
        const contMetadata = control.getMetadata();
        // getLibraryName method does not exist on events
        if (contMetadata?.getLibraryName) {
          const contLibName = contMetadata.getLibraryName();
          resolve(contLibName);
        } else {
          resolve(''); // return empty for events
        }
      });
    });
  }

  /**
   * Function that checks if control is reuse component
   *
   * @param controlId id control
   * @param ui5VersionInfo UI5 version information
   * @returns boolean if control is from reused component view
   */
  function isReuseComponent(controlId, ui5VersionInfo) {
    if (isLowerThanMinimalUi5Version(ui5VersionInfo, {
      major: 1,
      minor: 115
    })) {
      return false;
    }
    const component = getComponent(controlId);
    if (!component) {
      return false;
    }
    const manifest = component.getManifest();
    if (!manifest) {
      return false;
    }
    return manifest['sap.app']?.type === 'component';
  }

  /**
   * Gets the root view of component for the provided ComponentContainer control.
   *
   * @param container ComponentContainer control.
   * @returns XMLView which is the root control of the component if it exists.
   */
  function getRootControlFromComponentContainer(container) {
    if (container) {
      const componentId = container.getComponent();
      const component = getComponent(componentId);
      if (component instanceof UIComponent) {
        const rootControl = component.getRootControl();
        if (rootControl instanceof XMLView) {
          return rootControl;
        }
      }
    }
    return undefined;
  }
  var __exports = {
    __esModule: true
  };
  __exports.getRuntimeControl = getRuntimeControl;
  __exports.getLibrary = getLibrary;
  __exports.isReuseComponent = isReuseComponent;
  __exports.getRootControlFromComponentContainer = getRootControlFromComponentContainer;
  return __exports;
});
//# sourceMappingURL=utils.js.map