"use strict";

sap.ui.define(["sap/m/MessageToast", "sap/ui/core/Element", "sap/base/Log", "sap/ui/fl/Utils", "../utils/error", "../utils/version"], function (MessageToast, Element, Log, FlexUtils, ___utils_error, ___utils_version) {
  "use strict";

  function __ui5_require_async(path) {
    return new Promise(function (resolve, reject) {
      sap.ui.require([path], function (module) {
        if (!(module && module.__esModule)) {
          module = module === null || !(typeof module === "object" && path.endsWith("/library")) ? {
            default: module
          } : module;
          Object.defineProperty(module, "__esModule", {
            value: true
          });
        }
        resolve(module);
      }, function (err) {
        reject(err);
      });
    });
  }
  const getError = ___utils_error["getError"];
  const isLowerThanMinimalUi5Version = ___utils_version["isLowerThanMinimalUi5Version"];
  /**
   * Defers the resolution of the promise, stores resolve/reject functions so that they can be accessed at a later stage.
   *
   * @description A Deferred object contains an unresolved promise along with the functions to resolve or reject that promise.
   *
   * @returns {Deferred} Deferred object
   */
  function createDeferred() {
    let resolve = null;
    let reject = null;
    const promise = new Promise((res, rej) => {
      resolve = res;
      reject = rej;
    });
    if (resolve === null || reject === null) {
      throw new Error('Failed to initialize resolve and reject functions.');
    }
    return {
      promise,
      resolve,
      reject
    };
  }

  /**
   * Checks if the fragment name associated with a command matches the specified fragment name.
   *
   * @param {FlexCommand} command - The command object containing the prepared change to be examined.
   * @param {string} fragmentName - The name of the fragment to match against the command's change.
   * @returns {boolean} Returns true if the command's change contains a fragment path that matches
   *                    the specified fragment name; otherwise, returns false.
   */
  function matchesFragmentName(command, fragmentName) {
    if (typeof command.getPreparedChange !== 'function') {
      return false;
    }
    const change = command.getPreparedChange().getDefinition();
    return change.content?.fragmentPath?.includes(`${fragmentName}.fragment.xml`) || false;
  }

  /**
   * Displays a message to the user indicating that an XML fragment will be created upon saving a change.
   *
   * @param {string} message - The message to be shown in the message toast.
   * @param {number} duration - The duration during which message toast will be active.
   */
  function notifyUser(message) {
    let duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
    MessageToast.show(message, {
      duration
    });
  }

  /**
   * Check if element is sync view
   *
   * @param element Design time Element
   * @returns boolean if element is sync view or not
   */
  function isSyncView(element) {
    return element?.getMetadata()?.getName()?.includes('XMLView') && element?.oAsyncState === undefined;
  }

  /**
   * Get Ids for all sync views
   *
   * @param ui5VersionInfo UI5 Version Information
   *
   * @returns array of Ids for application sync views
   */
  async function getAllSyncViewsIds(ui5VersionInfo) {
    const syncViewIds = [];
    try {
      if (isLowerThanMinimalUi5Version(ui5VersionInfo, {
        major: 1,
        minor: 120
      })) {
        const elements = Element.registry.filter(() => true);
        elements.forEach(ui5Element => {
          if (isSyncView(ui5Element)) {
            syncViewIds.push(ui5Element.getId());
          }
        });
      } else {
        const ElementRegistry = (await __ui5_require_async('sap/ui/core/ElementRegistry')).default;
        const elements = ElementRegistry.all();
        Object.entries(elements).forEach(_ref => {
          let [key, ui5Element] = _ref;
          if (isSyncView(ui5Element)) {
            syncViewIds.push(key);
          }
        });
      }
    } catch (error) {
      Log.error('Could not get application sync views', getError(error));
    }
    return syncViewIds;
  }
  /**
   * Gets controller name and view ID for the given UI5 control.
   *
   * @param control UI5 control.
   * @returns The controller name and view ID.
   */

  function getControllerInfoForControl(control) {
    const view = FlexUtils.getViewForControl(control);
    const controllerName = view.getController().getMetadata().getName();
    const viewId = view.getId();
    return {
      controllerName,
      viewId
    };
  }

  /**
   * Gets controller name and view ID for the given overlay control.
   *
   * @param overlayControl The overlay control.
   * @returns The controller name and view ID.
   */

  function getControllerInfo(overlayControl) {
    const control = overlayControl.getElement();
    return getControllerInfoForControl(control);
  }
  var __exports = {
    __esModule: true
  };
  __exports.createDeferred = createDeferred;
  __exports.matchesFragmentName = matchesFragmentName;
  __exports.notifyUser = notifyUser;
  __exports.getAllSyncViewsIds = getAllSyncViewsIds;
  __exports.getControllerInfoForControl = getControllerInfoForControl;
  __exports.getControllerInfo = getControllerInfo;
  return __exports;
});
//# sourceMappingURL=utils.js.map