"use strict";

sap.ui.define(["sap/ui/core/Fragment", "sap/ui/fl/Utils", "./controllers/AddFragment.controller", "./controllers/ControllerExtension.controller", "./controllers/ExtensionPoint.controller", "../cpe/utils", "../i18n"], function (Fragment, FlUtils, __AddFragment, __ControllerExtension, __ExtensionPoint, ___cpe_utils, ___i18n) {
  "use strict";

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule && typeof obj.default !== "undefined" ? obj.default : obj;
  }
  const AddFragment = _interopRequireDefault(__AddFragment);
  const ControllerExtension = _interopRequireDefault(__ControllerExtension);
  const ExtensionPoint = _interopRequireDefault(__ExtensionPoint);
  const isReuseComponent = ___cpe_utils["isReuseComponent"];
  const getTextBundle = ___i18n["getTextBundle"];
  var DialogNames = /*#__PURE__*/function (DialogNames) {
    DialogNames["ADD_FRAGMENT"] = "AddFragment";
    DialogNames["CONTROLLER_EXTENSION"] = "ControllerExtension";
    DialogNames["ADD_FRAGMENT_AT_EXTENSION_POINT"] = "ExtensionPoint";
    return DialogNames;
  }(DialogNames || {});
  /**
   * Handler for enablement of Extend With Controller context menu entry
   *
   * @param control UI5 control.
   * @param syncViewsIds Runtime Authoring
   * @param ui5VersionInfo UI5 version information
   *
   * @returns boolean whether menu item is enabled or not
   */
  function isControllerExtensionEnabledForControl(control, syncViewsIds, ui5VersionInfo) {
    const clickedControlId = FlUtils.getViewForControl(control).getId();
    const isClickedControlReuseComponent = isReuseComponent(clickedControlId, ui5VersionInfo);
    return !syncViewsIds.includes(clickedControlId) && !isClickedControlReuseComponent;
  }

  /**
   * Handler for enablement of Extend With Controller context menu entry
   *
   * @param overlays Control overlays
   * @param syncViewsIds Runtime Authoring
   * @param ui5VersionInfo UI5 version information
   *
   * @returns boolean whether menu item is enabled or not
   */
  const isControllerExtensionEnabled = (overlays, syncViewsIds, ui5VersionInfo) => {
    if (overlays.length === 0 || overlays.length > 1) {
      return false;
    }
    return isControllerExtensionEnabledForControl(overlays[0].getElement(), syncViewsIds, ui5VersionInfo);
  };

  /**
   * Determines whether the fragment command should be enabled based on the provided overlays.
   *
   * @param {ElementOverlay[]} overlays - An array of ElementOverlay objects representing the UI overlays.
   * @param ui5VersionInfo UI5 version information
   * @returns {boolean} True if the fragment command is enabled, false otherwise.
   */
  const isFragmentCommandEnabled = (overlays, ui5VersionInfo) => {
    if (overlays.length === 0 || overlays.length > 1) {
      return false;
    }
    const control = overlays[0].getElement();
    return hasStableId(control) && !isReuseComponent(control.getId(), ui5VersionInfo);
  };

  /**
   * Determines whether control has stable id
   * @param {ManagedObject} control - ManagedObject object representing the UI control.
   * @returns {boolean} True if control has stable Id, false otherwise
   */
  const hasStableId = control => {
    return FlUtils.checkControlId(control);
  };

  /**
   * Determines the text that should be displayed for the Add Fragment context menu item.
   *
   * @param {ElementOverlay} overlay - An ElementOverlay object representing the UI overlay.
   * @returns {string} The text of the Add Fragment context menu item.
   */
  const getAddFragmentItemText = overlay => {
    const control = overlay.getElement();
    if (control && !hasStableId(control)) {
      return 'Add: Fragment (Unavailable due to unstable ID of the control or its parent control)';
    }
    return 'Add: Fragment';
  };

  /**
   * Handler for new context menu entry
   *
   * @param overlay Control overlays
   * @param rta Runtime Authoring
   * @param dialogName Dialog name
   * @param extensionPointData Control ID
   * @param options Dialog options
   */
  async function handler(overlay, rta, dialogName, extensionPointData) {
    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    let controller;
    const resources = await getTextBundle();
    switch (dialogName) {
      case DialogNames.ADD_FRAGMENT:
        controller = new AddFragment(`open.ux.preview.client.adp.controllers.${dialogName}`, overlay, rta, {
          aggregation: options.aggregation,
          title: resources.getText(options.title ?? 'ADP_ADD_FRAGMENT_DIALOG_TITLE')
        });
        break;
      case DialogNames.CONTROLLER_EXTENSION:
        controller = new ControllerExtension(`open.ux.preview.client.adp.controllers.${dialogName}`, overlay, rta);
        break;
      case DialogNames.ADD_FRAGMENT_AT_EXTENSION_POINT:
        controller = new ExtensionPoint(`open.ux.preview.client.adp.controllers.${dialogName}`, overlay, rta, extensionPointData);
        break;
    }
    const id = dialogName === DialogNames.ADD_FRAGMENT_AT_EXTENSION_POINT ? `dialog--${dialogName}` : undefined;
    const dialog = await Fragment.load({
      name: `open.ux.preview.client.adp.ui.${dialogName}`,
      controller,
      id
    });
    await controller.setup(dialog);
  }

  /**
   * Adds a new item to the context menu
   *
   * @param rta Runtime Authoring
   * @param syncViewsIds Ids of all application sync views
   * @param ui5VersionInfo UI5 version information
   */
  const initDialogs = (rta, syncViewsIds, ui5VersionInfo) => {
    const contextMenu = rta.getDefaultPlugins().contextMenu;
    contextMenu.addMenuItem({
      id: 'ADD_FRAGMENT',
      text: getAddFragmentItemText,
      handler: async overlays => await handler(overlays[0], rta, DialogNames.ADD_FRAGMENT),
      icon: 'sap-icon://attachment-html',
      enabled: overlays => isFragmentCommandEnabled(overlays, ui5VersionInfo)
    });
    contextMenu.addMenuItem({
      id: 'EXTEND_CONTROLLER',
      text: 'Extend With Controller',
      handler: async overlays => await handler(overlays[0], rta, DialogNames.CONTROLLER_EXTENSION),
      icon: 'sap-icon://create-form',
      enabled: overlays => isControllerExtensionEnabled(overlays, syncViewsIds, ui5VersionInfo)
    });
  };
  var __exports = {
    __esModule: true
  };
  __exports.DialogNames = DialogNames;
  __exports.isControllerExtensionEnabledForControl = isControllerExtensionEnabledForControl;
  __exports.isControllerExtensionEnabled = isControllerExtensionEnabled;
  __exports.isFragmentCommandEnabled = isFragmentCommandEnabled;
  __exports.getAddFragmentItemText = getAddFragmentItemText;
  __exports.handler = handler;
  __exports.initDialogs = initDialogs;
  return __exports;
});
//# sourceMappingURL=init-dialogs.js.map