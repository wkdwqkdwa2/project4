"use strict";

sap.ui.define(["sap/ui/rta/command/CommandFactory", "../../../cpe/quick-actions/utils", "../../../utils/core", "./utils", "../simple-quick-action-base"], function (CommandFactory, _____cpe_quick_actions_utils, _____utils_core, ___utils, ___simple_quick_action_base) {
  "use strict";

  const pageHasControlId = _____cpe_quick_actions_utils["pageHasControlId"];
  const getControlById = _____utils_core["getControlById"];
  const getAppComponent = ___utils["getAppComponent"];
  const getPageName = ___utils["getPageName"];
  const getReference = ___utils["getReference"];
  const SimpleQuickActionDefinitionBase = ___simple_quick_action_base["SimpleQuickActionDefinitionBase"];
  const ENABLE_CLEAR_FILTER_BAR_TYPE = 'enable-clear-filter-bar';
  const PROPERTY_PATH = 'controlConfiguration/@com.sap.vocabularies.UI.v1.SelectionFields/showClearButton';
  const CONTROL_TYPE = 'sap.fe.macros.controls.FilterBar';

  /**
   * Quick Action for toggling the visibility of "clear filter bar" button in List Report page.
   */
  class ToggleClearFilterBarQuickAction extends SimpleQuickActionDefinitionBase {
    constructor(context) {
      super(ENABLE_CLEAR_FILTER_BAR_TYPE, [], '', context);
    }
    forceRefreshAfterExecution = true;
    isClearButtonEnabled = false;
    initialize() {
      const controls = this.context.controlIndex[CONTROL_TYPE] ?? [];
      for (const control of controls) {
        const isActionApplicable = pageHasControlId(this.context.view, control.controlId);
        const filterBar = getControlById(control.controlId);
        if (isActionApplicable && filterBar) {
          this.control = filterBar;
          this.isClearButtonEnabled = filterBar.getShowClearButton();
        }
      }
    }
    get textKey() {
      return this.isClearButtonEnabled ? 'V4_QUICK_ACTION_LR_DISABLE_CLEAR_FILTER_BAR' : 'V4_QUICK_ACTION_LR_ENABLE_CLEAR_FILTER_BAR';
    }
    async execute() {
      const controls = this.context.controlIndex[CONTROL_TYPE] ?? [];
      const control = controls[0];
      if (control) {
        const modifiedControl = getControlById(control.controlId);
        if (!modifiedControl) {
          return [];
        }
        const {
          flexSettings
        } = this.context;
        const parent = modifiedControl.getParent();
        if (!parent) {
          return [];
        }
        const modifiedValue = {
          reference: getReference(modifiedControl),
          appComponent: getAppComponent(modifiedControl),
          changeType: 'appdescr_fe_changePageConfiguration',
          parameters: {
            page: getPageName(parent),
            entityPropertyChange: {
              propertyPath: PROPERTY_PATH,
              propertyValue: !this.isClearButtonEnabled,
              operation: 'UPSERT'
            }
          }
        };
        const command = await CommandFactory.getCommandFor(modifiedControl, 'appDescriptor', modifiedValue, null, flexSettings);
        this.isClearButtonEnabled = !this.isClearButtonEnabled;
        return [command];
      }
      return [];
    }
  }
  var __exports = {
    __esModule: true
  };
  __exports.ENABLE_CLEAR_FILTER_BAR_TYPE = ENABLE_CLEAR_FILTER_BAR_TYPE;
  __exports.ToggleClearFilterBarQuickAction = ToggleClearFilterBarQuickAction;
  return __exports;
});
//# sourceMappingURL=lr-toggle-clear-filter-bar.js.map