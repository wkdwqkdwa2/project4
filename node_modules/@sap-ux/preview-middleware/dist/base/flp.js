"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlpSandbox = void 0;
exports.initAdp = initAdp;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const ejs_1 = require("ejs");
const fs_1 = require("fs");
const path_1 = require("path");
const express_1 = require("express");
const adp_tooling_1 = require("@sap-ux/adp-tooling");
const btp_utils_1 = require("@sap-ux/btp-utils");
const feature_toggle_1 = require("@sap-ux/feature-toggle");
const flex_1 = require("./flex");
const test_1 = require("./test");
const config_1 = require("./config");
const DEVELOPER_MODE_CONFIG = new Map([
    // Run application in design time mode
    // Adds bindingString to BindingInfo objects. Required to create and read PropertyBinding changes
    ['xx-designMode', 'true'],
    // In design mode, the controller code will not be executed by default, which is not desired in our case, so we suppress the deactivation
    ['xx-suppressDeactivationOfControllerCode', 'true'],
    // Make sure that XML preprocessing results are correctly invalidated
    ['xx-viewCache', 'false']
]);
const DEFAULT_LIVERELOAD_PORT = 35729;
/**
 * Class handling preview of a sandbox FLP.
 */
class FlpSandbox {
    project;
    utils;
    logger;
    onChangeRequest;
    templateConfig;
    config;
    rta;
    test;
    router;
    /**
     * Constructor setting defaults and keeping reference to workspace resources.
     *
     * @param config configuration from the ui5.yaml
     * @param project reference to the project provided by the UI5 CLI
     * @param utils middleware utilities provided by the UI5 CLI
     * @param logger logger instance
     */
    constructor(config, project, utils, logger) {
        this.project = project;
        this.utils = utils;
        this.logger = logger;
        this.config = (0, config_1.getFlpConfigWithDefaults)(config.flp);
        this.test = config.test;
        this.rta = config.rta;
        logger.debug(`Config: ${JSON.stringify({ flp: this.config, rta: this.rta, test: this.test })}`);
        this.router = (0, express_1.Router)();
    }
    /**
     * Registers a handler function to be called when a change request occurs.
     *
     * @param {OnChangeRequestHandler} handler - The function to be executed when a change request occurs.
     */
    addOnChangeRequestHandler(handler) {
        this.onChangeRequest = handler;
    }
    /**
     * Initialize the FLP sandbox router.
     *
     * @param manifest application manifest
     * @param componentId optional componentId e.g. for adaptation projects
     * @param resources optional additional resource mappings
     */
    async init(manifest, componentId, resources = {}) {
        this.createFlexHandler();
        this.config.libs ??= await this.hasLocateReuseLibsScript();
        const id = manifest['sap.app'].id;
        this.templateConfig = (0, config_1.createFlpTemplateConfig)(this.config, manifest, resources);
        await (0, config_1.addApp)(this.templateConfig, manifest, {
            componentId,
            target: resources[componentId ?? id] ?? this.templateConfig.basePath,
            local: '.',
            intent: this.config.intent
        }, this.logger);
        this.addStandardRoutes();
        if (this.rta) {
            this.rta.options ??= {};
            this.rta.options.baseId = componentId ?? id;
            this.rta.options.appName = id;
            this.addEditorRoutes(this.rta);
        }
        if (this.test) {
            this.addTestRoutes(this.test.filter((config) => config.framework !== 'Testsuite'), id);
            this.createTestSuite(this.test);
        }
        await this.addRoutesForAdditionalApps();
        this.logger.info(`Initialized for app ${id}`);
        this.logger.debug(`Configured apps: ${JSON.stringify(this.templateConfig.apps)}`);
    }
    /**
     * Generates the FLP sandbox for an editor.
     *
     * @param rta runtime authoring configuration
     * @param editor editor configuration
     * @returns FLP sandbox html
     */
    generateSandboxForEditor(rta, editor) {
        const defaultGenerator = editor.developerMode
            ? '@sap-ux/control-property-editor'
            : '@sap-ux/preview-middleware';
        const config = { ...this.templateConfig };
        /* sap.ui.rta needs to be added to the list of preload libs for variants management and adaptation projects */
        if (!config.ui5.libs.includes('sap.ui.rta')) {
            const libs = config.ui5.libs.split(',');
            libs.push('sap.ui.rta');
            config.ui5.libs = libs.join(',');
        }
        config.flex = {
            layer: rta.layer,
            ...rta.options,
            generator: editor.generator ?? defaultGenerator,
            developerMode: editor.developerMode === true,
            pluginScript: editor.pluginScript
        };
        config.features = feature_toggle_1.FeatureToggleAccess.getAllFeatureToggles();
        if (editor.developerMode === true) {
            config.ui5.bootstrapOptions = serializeUi5Configuration(DEVELOPER_MODE_CONFIG);
        }
        const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/sandbox.html'), 'utf-8');
        return (0, ejs_1.render)(template, config);
    }
    /**
     * Add additional routes for configured editors.
     *
     * @param rta runtime authoring configuration
     */
    addEditorRoutes(rta) {
        const cpe = (0, path_1.dirname)(require.resolve('@sap-ux/control-property-editor-sources'));
        for (const editor of rta.editors) {
            let previewUrl = editor.path.startsWith('/') ? editor.path : `/${editor.path}`;
            if (editor.developerMode) {
                previewUrl = `${previewUrl}.inner.html`;
                editor.pluginScript ??= 'open/ux/preview/client/cpe/init';
                this.router.get(editor.path, async (_req, res) => {
                    const scenario = rta.options?.scenario;
                    let templatePreviewUrl = `${previewUrl}?sap-ui-xx-viewCache=false&fiori-tools-rta-mode=forAdaptation&sap-ui-rta-skip-flex-validation=true&sap-ui-xx-condense-changes=true#${this.config.intent.object}-${this.config.intent.action}`;
                    if (scenario === 'ADAPTATION_PROJECT') {
                        templatePreviewUrl = templatePreviewUrl.replace('?', `?sap-ui-layer=${rta.layer}&`);
                    }
                    const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/editor.html'), 'utf-8');
                    const features = feature_toggle_1.FeatureToggleAccess.getAllFeatureToggles();
                    const envPort = process.env.FIORI_TOOLS_LIVERELOAD_PORT;
                    let livereloadPort = envPort ? parseInt(envPort, 10) : DEFAULT_LIVERELOAD_PORT;
                    livereloadPort = isNaN(livereloadPort) ? DEFAULT_LIVERELOAD_PORT : livereloadPort;
                    const envLivereloadUrl = (0, btp_utils_1.isAppStudio)() ? await (0, btp_utils_1.exposePort)(livereloadPort) : undefined;
                    const html = (0, ejs_1.render)(template, {
                        previewUrl: templatePreviewUrl,
                        telemetry: rta.options?.telemetry ?? false,
                        appName: rta.options?.appName,
                        scenario,
                        livereloadPort,
                        livereloadUrl: envLivereloadUrl,
                        features: JSON.stringify(features)
                    });
                    this.sendResponse(res, 'text/html', 200, html);
                });
                let path = (0, path_1.dirname)(editor.path);
                if (!path.endsWith('/')) {
                    path = `${path}/`;
                }
                this.router.use(`${path}editor`, (0, express_1.static)(cpe));
            }
            this.router.get(previewUrl, (_req, res) => {
                const html = this.generateSandboxForEditor(rta, editor).replace('</body>', `</body>\n<!-- livereload disabled for editor </body>-->`);
                this.sendResponse(res, 'text/html', 200, html);
            });
        }
    }
    /**
     * Add routes for html and scripts required for a local FLP.
     */
    addStandardRoutes() {
        // register static client sources
        this.router.use(config_1.PREVIEW_URL.client.path, (0, express_1.static)(config_1.PREVIEW_URL.client.local));
        // add route for the sandbox.html
        this.router.get(this.config.path, (async (_req, res, next) => {
            // inform the user if a html file exists on the filesystem
            const file = await this.project.byPath(this.config.path);
            if (file) {
                this.logger.info(`HTML file returned at ${this.config.path} is loaded from the file system.`);
                next();
            }
            else {
                const template = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/flp/sandbox.html'), 'utf-8');
                const html = (0, ejs_1.render)(template, this.templateConfig);
                this.sendResponse(res, 'text/html', 200, html);
            }
        }));
    }
    /**
     * Try finding a locate-reuse-libs script in the project.
     *
     * @returns the location of the locate-reuse-libs script or undefined.
     */
    async hasLocateReuseLibsScript() {
        const files = await this.project.byGlob('**/locate-reuse-libs.js');
        return files.length > 0;
    }
    /**
     * Add additional routes for apps also to be shown in the local FLP.
     */
    async addRoutesForAdditionalApps() {
        for (const app of this.config.apps) {
            let manifest;
            if (app.local) {
                manifest = JSON.parse((0, fs_1.readFileSync)((0, path_1.join)(app.local, 'webapp/manifest.json'), 'utf-8'));
                this.router.use(app.target, (0, express_1.static)((0, path_1.join)(app.local, 'webapp')));
                this.logger.info(`Serving additional application at ${app.target} from ${app.local}`);
            }
            else if (app.componentId) {
                manifest = {
                    'sap.app': {
                        id: app.componentId,
                        title: app.intent ? `${app.intent.object}-${app.intent.action}` : app.componentId
                    }
                };
            }
            if (manifest) {
                await (0, config_1.addApp)(this.templateConfig, manifest, app, this.logger);
                this.logger.info(`Adding additional intent: ${app.intent?.object}-${app.intent?.action}`);
            }
            else {
                this.logger.info(`Invalid application config for route ${app.target} because neither componentId nor local folder provided.`);
            }
        }
    }
    /**
     * Create required routes for flex.
     */
    createFlexHandler() {
        const fs = (0, mem_fs_editor_1.create)((0, mem_fs_1.create)());
        const api = `${config_1.PREVIEW_URL.api}/changes`;
        this.router.use(api, (0, express_1.json)());
        this.router.get(api, (async (_req, res) => {
            const changes = await (0, flex_1.readChanges)(this.project, this.logger);
            if (this.onChangeRequest) {
                for (const change of Object.values(changes)) {
                    await this.onChangeRequest('read', change, fs, this.logger);
                }
            }
            this.sendResponse(res, 'application/json', 200, JSON.stringify(changes));
        }));
        this.router.post(api, (async (req, res) => {
            try {
                const change = req.body;
                if (this.onChangeRequest) {
                    await this.onChangeRequest('write', change, fs, this.logger);
                }
                const { success, message } = (0, flex_1.writeChange)(change, this.utils.getProject().getSourcePath(), fs, this.logger);
                if (success) {
                    fs.commit(() => this.sendResponse(res, 'text/plain', 200, message ?? ''));
                }
                else {
                    this.sendResponse(res, 'text/plain', 400, 'INVALID_DATA');
                }
            }
            catch (error) {
                this.sendResponse(res, 'text/plain', 500, error.message);
            }
        }));
        this.router.delete(api, (async (req, res) => {
            try {
                const { success, message } = (0, flex_1.deleteChange)(req.body, this.utils.getProject().getSourcePath(), this.logger);
                if (success) {
                    this.sendResponse(res, 'text/plain', 200, message ?? '');
                }
                else {
                    this.sendResponse(res, 'text/plain', 400, 'INVALID_DATA');
                }
            }
            catch (error) {
                this.sendResponse(res, 'text/plain', 500, error.message);
            }
        }));
    }
    /**
     * If it is part of TestConfig, create a test suite for the test configurations.
     *
     * @param configs test configurations
     * @private
     */
    createTestSuite(configs) {
        const testsuiteConfig = configs.find((config) => config.framework === 'Testsuite');
        if (!testsuiteConfig) {
            //silent skip: create a testsuite only if it is explicitly part of the test configuration
            return;
        }
        if (configs.length <= 1) {
            this.logger.warn('Skip testsuite generation. No test frameworks configured.');
            return;
        }
        const testsuite = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/testsuite.qunit.html'), 'utf-8');
        const initTemplate = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/testsuite.qunit.js'), 'utf-8');
        const config = (0, test_1.mergeTestConfigDefaults)(testsuiteConfig);
        this.logger.debug(`Add route for ${config.path}`);
        this.router.get(config.path, (async (_req, res) => {
            this.logger.debug(`Serving test route: ${config.path}`);
            const templateConfig = {
                basePath: this.templateConfig.basePath,
                initPath: config.init
            };
            const html = (0, ejs_1.render)(testsuite, templateConfig);
            this.sendResponse(res, 'text/html', 200, html);
        }));
        if (testsuiteConfig.init !== undefined) {
            this.logger.debug(`Skip serving testsuite init script in favor of provided script: ${testsuiteConfig.init}`);
            return;
        }
        const testPaths = [];
        for (const testConfig of configs) {
            if (testConfig.framework === 'Testsuite') {
                continue;
            }
            const mergedConfig = (0, test_1.mergeTestConfigDefaults)(testConfig);
            testPaths.push(path_1.posix.relative(path_1.posix.dirname(config.path), mergedConfig.path));
        }
        this.logger.debug(`Add route for ${config.init}`);
        this.router.get(config.init, (async (_req, res, next) => {
            const files = await this.project.byGlob(config.init.replace('.js', '.[jt]s'));
            if (files?.length > 0) {
                this.logger.warn(`Script returned at ${config.path} is loaded from the file system.`);
                next();
            }
            else {
                this.logger.debug(`Serving test route: ${config.init}`);
                const templateConfig = {
                    testPaths: testPaths
                };
                const js = (0, ejs_1.render)(initTemplate, templateConfig);
                this.sendResponse(res, 'application/javascript', 200, js);
            }
        }));
    }
    /**
     * Send a response with the given content type, status and body.
     * Ensure compliance with common APIs in express and connect.
     *
     * @param res the response object
     * @param contentType the content type
     * @param status the response status
     * @param body the response body
     * @private
     */
    sendResponse(res, contentType, status, body) {
        res.writeHead(status, {
            'Content-Type': contentType
        });
        res.write(body);
        res.end();
    }
    /**
     * Add routes for html and scripts required for a local test FLP.
     *
     * @param configs test configurations
     * @param id application id from manifest
     */
    addTestRoutes(configs, id) {
        const ns = id.replace(/\./g, '/');
        const htmlTemplate = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/qunit.html'), 'utf-8');
        const initTemplate = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../../templates/test/qunit.js'), 'utf-8');
        for (const testConfig of configs) {
            const config = (0, test_1.mergeTestConfigDefaults)(testConfig);
            this.logger.debug(`Add route for ${config.path}`);
            // add route for the *.qunit.html
            this.router.get(config.path, (async (_req, res, next) => {
                this.logger.debug(`Serving test route: ${config.path}`);
                const file = await this.project.byPath(config.path);
                if (file) {
                    this.logger.warn(`HTML file returned at ${config.path} is loaded from the file system.`);
                    next();
                }
                else {
                    const templateConfig = (0, config_1.createTestTemplateConfig)(config, id, this.templateConfig.ui5.theme);
                    const html = (0, ejs_1.render)(htmlTemplate, templateConfig);
                    this.sendResponse(res, 'text/html', 200, html);
                }
            }));
            if (testConfig.init !== undefined) {
                this.logger.debug(`Skip serving test init script in favor of provided script: ${testConfig.init}`);
                continue;
            }
            // add route for the init file
            this.logger.debug(`Add route for ${config.init}`);
            this.router.get(config.init, (async (_req, res, next) => {
                this.logger.debug(`Serving test init script: ${config.init}`);
                const files = await this.project.byGlob(config.init.replace('.js', '.[jt]s'));
                if (files?.length > 0) {
                    this.logger.warn(`Script returned at ${config.path} is loaded from the file system.`);
                    next();
                }
                else {
                    const testFiles = await this.project.byGlob(config.pattern);
                    const templateConfig = { tests: (0, test_1.generateImportList)(ns, testFiles) };
                    const js = (0, ejs_1.render)(initTemplate, templateConfig);
                    this.sendResponse(res, 'application/javascript', 200, js);
                }
            }));
        }
    }
}
exports.FlpSandbox = FlpSandbox;
/**
 * Creates an attribute string that can be added to an HTML element.
 *
 * @param attributes map with attributes and their values
 * @param indent indentation thats inserted before each attribute
 * @param prefix value that should be added at the start of to all attribute names
 * @returns attribute string
 */
function serializeDataAttributes(attributes, indent = '', prefix = 'data') {
    return [...attributes.entries()]
        .map(([name, value]) => {
        return `${indent}${prefix}-${name}="${value}"`;
    })
        .join('\n');
}
/**
 * Creates an attribute string that can be added to bootstrap script in a HTML file.
 *
 * @param config ui5 configuration options
 * @returns attribute string
 */
function serializeUi5Configuration(config) {
    return '\n' + serializeDataAttributes(config, '        ', 'data-sap-ui');
}
/**
 * Initialize the preview for an adaptation project.
 *
 * @param rootProject reference to the project
 * @param config configuration from the ui5.yaml
 * @param flp FlpSandbox instance
 * @param util middleware utilities provided by the UI5 CLI
 * @param logger logger instance
 */
async function initAdp(rootProject, config, flp, util, logger) {
    const appVariant = await rootProject.byPath('/manifest.appdescr_variant');
    if (appVariant) {
        const adp = new adp_tooling_1.AdpPreview(config, rootProject, util, logger);
        const variant = JSON.parse(await appVariant.getString());
        const layer = await adp.init(variant);
        if (flp.rta) {
            flp.rta.layer = layer;
            flp.rta.options = {
                ...flp.rta.options,
                projectId: variant.id,
                scenario: 'ADAPTATION_PROJECT'
            };
            for (const editor of flp.rta.editors) {
                editor.pluginScript ??= 'open/ux/preview/client/adp/init';
            }
        }
        const descriptor = adp.descriptor;
        descriptor.asyncHints.requests = [];
        const { name, manifest } = descriptor;
        await flp.init(manifest, name, adp.resources);
        flp.router.use(adp.descriptor.url, adp.proxy.bind(adp));
        flp.addOnChangeRequestHandler(adp.onChangeRequest.bind(adp));
        flp.router.use((0, express_1.json)());
        adp.addApis(flp.router);
    }
    else {
        throw new Error('ADP configured but no manifest.appdescr_variant found.');
    }
}
//# sourceMappingURL=flp.js.map